:- use_module(library(file_systems)).
:- use_module(library(system)).

:- compile('../mas/redis_client.pl').
:- compile('../pulisciStringhe.pl').

:- dynamic height/1, age/1, weight/1, lists/2, healthState/1, trouble/1, patology/1, therapy/4, taken/1, temperature/1,
        presmin_alta/0, presmin_bassa/0, presmax_alta/0, presmax_bassa/0, fever/2, angina/1, danger/1.

:- assert(lists(weight,[])), assert(lists(heartbeat,[])), assert(lists(systolic_pressure,[])),
    assert(lists(diastolic_pressure,[])), assert(lists(saturation,[])), assert(lists(patology,[])), assert(lists(therapy,[])).

/* costanti */
:- retractall(const_separator(_)), assert(const_separator('+')).
:- retractall(const_misura(_)), assert(const_misura('misura')).
:- retractall(const_low(_)), assert(const_low('low')).
:- retractall(const_normal(_)), assert(const_normal('normal')).
:- retractall(const_high(_)), assert(const_high('high')).


/* reminder per terapia */
take_medicine(therapy(Med,Qta,H,M)) :- therapy(Med,Qta,H,M), not(taken(therapy(Med,Qta,H,M))),
        datime(datime(Year,Month,Day,Hour,Min,Sec)), adatta(Hour,Nh), adatta(Min,Nmin), Nh >= H, Nmin >= M.
take_medicineI(therapy(Med,Qta,H,M)):> const_separator(Sep), atom_concat('medicina',Sep,Me), rimuovi_apici(Med,Nmed),atom_concat(Me,Nmed,Mes),
        atom_concat(Mes,Sep,Mess), rimuovi_apici(Qta,Nqta), atom_concat(Mess,Nqta,Message), mas_send(Message),
        assert(taken(therapy(Med,Qta,H,M))), print('Devi prendere la medicina '), print(Med),nl.

restart_therapy :- datime(datime(Year,Month,Day,Hour,Min,Sec)), Hour == 00, Min == 00.
restart_therapyI :> retractall(taken(_)).


/* reminder per misurazione temperatura e peso */
misura_temperatura :- not(misura_temperaturaP).
misura_temperaturaI :> const_separator(X), const_misura(Y), atom_concat(Y,X,Mes), atom_concat(Mes,'temperatura',Message), mas_send(Message).

misura_peso :- not(misura_pesoP).
misura_pesoI :> const_misura(Y), const_separator(X), atom_concat(Y,X,Mes), atom_concat(Mes,'peso',Message), mas_send(Message).

misura_pressione :- not(misura_pressioneP).
misura_pressioneI :> const_misura(Y), const_separator(X), atom_concat(Y,X,Mes), atom_concat(Mes,'pressione',Message), mas_send(Message).


/* raccolta dati del paziente e feedback immediato */
altezzaE(X) :> retractall(height(_)), assert(height(X)).

anniE(X) :> retractall(age(_)), assert(age(X)).

terapiaE(X) :> pulisciStringa(X,Y), splitta_su_virgole(Y,L), print('Terapia '), print(L),nl, nth0(0,L,Med), nth0(1,L,Qta), nth0(2,L,H), nth0(3,L,M),
        assertz(therapy(Med,Qta,H,M)).

patologiaE(X) :> pulisciStringa(X,Y), assert(patology(Y)), print('Patologia '), print(Y), nl.

pesoE(X) :> lists(weight,L), append(L,[X],Newlist), retractall(lists(weight,_)), assert(lists(weight,Newlist)).

saturazioneE(X) :> Base = 'saturazione', const_separator(S), atom_concat(Base,S,Mes),
        const_low(Low), const_normal(Normal), const_high(High),
        if(X<94, Res = High,if(X<97, Res = Low, Res = Normal)), atom_concat(Mes,Res,Message), mas_send(Message),
        lists(saturation,L), append(L,[X],Newlist), retractall(lists(saturation,_)), assert(lists(saturation,Newlist)).

battitoE(X) :> Base = 'battito', const_separator(S), atom_concat(Base,S,Mes),
        const_low(Low), const_normal(Normal), const_high(High),
        if(X<60, Res = Low,if(X>100, Res = High, Res = Normal)), atom_concat(Mes,Res,Message), mas_send(Message),
        lists(heartbeat,L), append(L,[X],Newlist), retractall(lists(heartbeat,_)), assert(lists(heartbeat,Newlist)).

presminimaE(X) :> Base = 'presminima', const_separator(S), atom_concat(Base,S,Mes),
        const_low(Low), const_normal(Normal), const_high(High),
        if(X<80, Res = Low,if(X>84, Res = High,Res = Normal)), atom_concat(Mes,Res,Message), mas_send(Message),
        lists(diastolic_pressure,L), append(L,[X],Newlist), retractall(lists(diastolic_pressure,_)), assert(lists(diastolic_pressure,Newlist)).

presmassimaE(X) :> Base = 'presmassima', const_separator(S), atom_concat(Base,S,Mes),
        const_low(Low), const_normal(Normal), const_high(High),
        if(X<115, Res = Low, if(X>120, Res = High, Res = Normal)), atom_concat(Mes,Res,Message), mas_send(Message),
        lists(systolic_pressure,L), append(L,[X],Newlist), retractall(lists(systolic_pressure,_)), assert(lists(systolic_pressure,Newlist)).

temperaturaE(X) :> Base = 'temperatura', const_separator(S), atom_concat(Base,S,Mes),
        const_low(Low), const_normal(Normal), const_high(High),
        if(X >= 37, if(X < 38, Res = Low, Res = High), Res = Normal), atom_concat(Mes,Res,Message), mas_send(Message),
        assert(fever(X,Res)).

statoE(X) :> pulisciStringa(X,Y), assert(healthState(Y)).

sensazioneE(X) :> pulisciStringa(X,Y), assert(trouble(Y)).


/* valutazione a lungo termine dello stato del paziente */
i_am(X,Diff) :- after_evp_time(peso(_),0,0,0,2), lists(weight,L), length(L,Index1), nth1(Index1,L,P1), Index2 is Index1 - 1, nth1(Index2,L,P2),
        const_separator(S), atom_concat('sei',S,Y),
        Diff is P1-P2, if(Diff > 0, R = 'ingrassato', if(Diff == 0, R = 'invariato', R = 'dimagrito')),
        atom_concat(Y,R,X), print('Il paziente risulta '), print(R), print(' di '), print(Diff), print(' kg').
i_amI(X,Diff) :> const_separator(S), atom_concat(X,S,Mes), name(Mes,Cmes), name(Diff,Cdiff),
        append(Cmes,Cdiff,Cmessage), name(Message,Cmessage), mas_send(Message), messageA(doctorAgent,send_message(variazione_peso(Diff),Ag)).

angina(X) :- trouble(X), X == 'dol_petto', retract(trouble(X)); trouble(X), X == 'dol_braccia', retract(trouble(X)).

angina_ev(X) :- after_evp_time(sensazione(_),0,0,0,1), angina(X).
angina_evI(X) :> assert(danger(X)), retract(angina(X)).

whats_up :- after_evp_time(angina_ev(_),0,0,10,0).
whats_upI :> Message = 'how', mas_send(Message).

tachicardia_ev :- after_evp_time(battito(_),0,0,0,1),lists(heartbeat,LH), last_values_mag(LH,120,Res), Res == 'si'.
tachicardia_evI :> assert(danger(tachicardia)).

bradicardia_ev :- after_evp_time(battito(_),0,0,0,1),lists(heartbeat,LH), last_values_min(LH,60,Res), Res == 'si'.
bradicardia_evI :> assert(danger(bradicardia)).

ipossia_grave_ev :-  after_evp_time(saturazione(_),0,0,0,1), lists(saturation,LS), last_values_min(LS,90,Res), Res == 'si'.
ipossia_grave_evI :> assert(danger(ipossia_grave)).

presmin_alta_ev :-  after_evp_time(presminima(_),0,0,0,1), lists(diastolic_pressure,LMin), last_values_mag(LMin,90,Res),
        (Res == si -> print('Pressione minima alta'),nl, true; retract(presmin_alta), false).
presmin_alta_evI :> assert(presmin_alta).

presmin_bassa_ev :-  after_evp_time(presminima(_),0,0,0,1), lists(diastolic_pressure,LMin), last_values_min(LMin,60,Res),
        (Res == si -> print('Pressione minima bassa '),nl, true; retract(presmin_bassa), false).
presmin_bassa_evI :> assert(presmin_bassa).

presmax_alta_ev :-  after_evp_time(presmassima(_),0,0,0,1), lists(systolic_pressure,LMax), last_values_mag(LMax,140,Res),
        (Res == si -> print('Pressione massima alta'),nl, true; retract(presmax_alta), false).
presmax_alta_evI :> assert(presmax_alta).

presmax_bassa_ev :-  after_evp_time(presmassima(_),0,0,0,1), lists(systolic_pressure,LMax), last_values_min(LMax,90,Res),
        (Res == si -> print('Pressione massima bassa '),nl, true; retract(presmax_bassa), false).
presmax_bassa_evI :> assert(presmax_bassa).

ipotensione_ev :- after_evp_time(presmax_bassa_ev,0,0,0,2), presmin_bassa, presmax_bassa.
ipotensione_evI :> assert(danger(ipotensione)), retract(presmin_bassa), retract(presmax_bassa).

ipertensione_ev :- after_evp_time(presmax_alta_ev,0,0,0,2), presmax_alta, presmin_alta.
ipertensione_evI :> assert(danger(ipertensione)), retract(presmax_alta), retract(presmin_alta).

i_have_fever(X) :- after_evp_time(temperatura(_),0,0,0,1), fever(X,Y), Y == 'high'.
i_have_feverI(X) :> messageA(doctorAgent, send_message(febbre(X),Ag)), retractall(fever(_,_)),nl, print('Il paziente ha la febbre a '), print(X).


/* Interazione con agente dottore. */
call_doctor(X) :- danger(X).
call_doctorI(X) :> messageA(doctorAgent, send_message(malore(X),Ag)), print('Il paziente ha '), print(X), retract(danger(X)).

doctor_suggestsE(X) :> const_separator(S),print('Il dottore suggerisce: '), print(X),nl,
        atom_concat('doctor',S,Mes), atom_concat(Mes,X,Message), mas_send(Message).


/* mantengo le liste dei parametri a 10 elementi cancellando il meno recente */
resize_list(N,Tail) :- lists(N,[Head|Tail]),length(Tail,Length), Limit is 9, Length >= Limit.
resize_listI(N,Newlist) :> retractall(lists(N,_)), assert(lists(N,Newlist)).


/* confronto dei valori nelle liste */
last_values_mag(List,Limit,Res) :- length(List,Index1), nth1(Index1,List, V1),
        Index2 is Index1 -1, nth1(Index2,List, V2),
        Index3 is Index2 -1, nth1(Index3,List, V3),
        (V1 >= Limit, V2 >= Limit, V3 >= Limit -> Res='si' ; Res='no').

last_values_min(List,Limit,Res) :- length(List,Index1), nth1(Index1,List, V1),
        Index2 is Index1 -1, nth1(Index2,List, V2),
        Index3 is Index2 -1, nth1(Index3,List, V3),
        (V1 =< Limit, V2 =< Limit, V3 =< Limit -> Res='si' ; Res='no').